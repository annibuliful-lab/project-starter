services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres-${cdr-intelligence}
    environment:
      - POSTGRES_USER=${POSTGRES_USER} # Use the variable from the .env file
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - '5432:5432' # Expose port 5432 (default PostgreSQL port)
    volumes:
      - ./postgres_data:/var/lib/postgresql/data # Persist PostgreSQL data on your host machine
    networks:
      - ${PROJECT}

  redis:
    image: redis:8.0-M02-alpine # Use the latest Redis version
    container_name: redis-${PROJECT}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD} # Use Redis password from .env
    ports:
      - '6379:6379' # Expose Redis default port
    networks:
      - ${PROJECT}

  rabbitmq:
    image: rabbitmq:management # Use RabbitMQ with the management plugin (Web UI)
    container_name: rabbit-mq-${PROJECT}
    ports:
      - '15672:15672' # Web UI port
      - '5672:5672' # RabbitMQ AMQP port
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER} # Use RabbitMQ user from .env
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD} # Use RabbitMQ password from .env
    networks:
      - cdr-${PROJECT}

  # neo4j:
  #   image: neo4j:5.26.0-community-bullseye
  #   container_name: neo4j-${PROJECT}
  #   ports:
  #     - '7474:7474' # Neo4j Browser
  #     - '7687:7687' # Bolt protocol
  #   environment:
  #     - NEO4J_AUTH=${NEO4J_AUTH}
  #     - NEO4J_ACCEPT_LICENSE_AGREEMENT=${NEO4J_ACCEPT_LICENSE_AGREEMENT}
  #   volumes:
  #     - ./neo4j_data:/data # Persistent data storage
  #     - ./neo4j_logs:/logs # Persistent logs storage
  #     - ./neo4j_import:/import # Import files for Cypher
  #     - ./neo4j_plugins:/plugins # Plugins directory for extensions
  #   networks:
  #     - ${PROJECT}

  minio:
    image: minio/minio
    volumes:
      - ./minio_data:/data
    ports:
      - '9000:9000'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data
    networks:
      - ${PROJECT}
# networks:
#   cdr-intelligence: # Define your custom network "cdr-intelligence"
#     driver: bridge # Optional, default driver is "bridge"
